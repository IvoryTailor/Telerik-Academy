namespace 01.StudentClass.Students
{
    using Enumerations;
    using System;
    using System.Text;

    public class Student : ICloneable, IComparable<Student>
    {
        //CONSTRUCTOR
        public Student(
            string fName,
            string mName,
            string lName,
            int ssn,
            string address,
            string telephone,
            string email,
            int course,
            UniversityType university,
            FacultyType faculty,
            SpecialtyType specialty)
        {
            this.FirstName = fName;
            this.MiddleName = mName;
            this.LastName = lName;
            this.SSN = ssn;
            this.Address = address;
            this.Telephone = telephone;
            this.Email = email;
            this.Course = course;
            this.University = university;
            this.Faculty = faculty;
            this.Specialty = specialty;
        }

        //PROPERTIES
        public string FirstName { get; set; }
        public string MiddleName { get; set; }
        public string LastName { get; set; }
        public int SSN { get; set; }
        public string Address { get; set; }
        public string Telephone { get; set; }
        public string Email { get; set; }
        public int Course { get; set; }
        public UniversityType University { get; set; }
        public FacultyType Faculty { get; set; }
        public SpecialtyType Specialty { get; set; }

        //METHODS
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.AppendLine($"{this.FirstName} {this.MiddleName} {this.LastName}");
            sb.AppendLine($"SSN: {this.SSN}");
            sb.AppendLine($"Address:  {this.Address}");
            sb.AppendLine($"Telephone:  {this.Telephone}");
            sb.AppendLine($"Email:  {this.Email}");
            sb.AppendLine($"Course:  {this.Course}");
            sb.AppendLine($"University:  {this.University}");
            sb.AppendLine($"Faculty:  {this.Faculty}");
            sb.AppendLine($"Specialty:  {this.Specialty}");

            return sb.ToString();
        }
        public override bool Equals(object obj)
        {
            if (!(obj is Student))
            {
                throw new InvalidCastException("The obj argument is not castable to Student");
            }
            Student student = (Student)obj;
            if (student.FirstName == this.FirstName
                && student.MiddleName == this.MiddleName
                && student.LastName == this.LastName
                && student.SSN == this.SSN
                && student.Address == this.Address
                && student.Telephone == this.Telephone
                && student.Email == this.Email
                && student.Course == this.Course
                && student.University == this.University
                && student.Faculty == this.Faculty
                && student.Specialty == this.Specialty)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        public override int GetHashCode()
        {
            return ((this.SSN.GetHashCode() + this.Course.GetHashCode()) ^ this.FirstName.GetHashCode() ^ this.SSN.GetHashCode());
        }

        //to escape casting to Student from object
        object ICloneable.Clone()
        {
            return this.Clone();
        }
        public Student Clone()
        {
            Student copy = new Student(
                this.FirstName,
                this.MiddleName,
                this.LastName,
                this.SSN,
                this.Address,
                this.Telephone,
                this.Email,
                this.Course,
                this.University,
                this.Faculty,
                this.Specialty);
            return copy;
        }

        public int CompareTo(Student student)
        {
            int fNameCompare = String.CompareOrdinal(this.FirstName, student.FirstName);
            if (fNameCompare != 0)
            {
                return fNameCompare;
            }else
            {
                int mNameCompare = String.CompareOrdinal(this.MiddleName, student.MiddleName);
                if (mNameCompare != 0)
                {
                    return mNameCompare;
                }else
                {
                    int lNameCompare = String.CompareOrdinal(this.LastName, student.LastName);
                    if (lNameCompare != 0)
                    {
                        return lNameCompare;
                    }
                    else
                    {
                        int ssnCompare = this.SSN.CompareTo(student.SSN);
                        if (ssnCompare != 0)
                        {
                            return ssnCompare;
                        }
                        else
                        {
                            return 0;
                        }
                    }
                }
            }
        }
        public static bool operator == (Student stu1, Student stu2)
        {
            return Student.Equals(stu1, stu2);
        }
        public static bool operator !=(Student stu1, Student stu2)
        {
            return !(Student.Equals(stu1, stu2));
        }
    }
}
