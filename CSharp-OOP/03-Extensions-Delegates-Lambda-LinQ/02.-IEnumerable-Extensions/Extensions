namespace 02_IEnumerableExtensions
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    public static class Extensions
    {
        public static T Sum<T>(this IEnumerable<T> source, T num2, T num3) where T: struct => (dynamic)num2 + (dynamic)num3;

        public static T Product<T>(this IEnumerable<T> source, T num2, T num3) where T : struct => (dynamic)num2 * (dynamic)num3;

        public static T Minh<T>(this IEnumerable<T> source) where T : struct, IComparable => source.Min();

        public static T Maxh<T>(this IEnumerable<T> source) where T : struct, IComparable => source.Max();

        public static double Average<T>(this IEnumerable<T> source) where T : struct
        {
            double sum = 0;
            var array = source.ToArray();
            for (int i = 0; i < array.Length; i++)
            {
                sum += (dynamic)array[i];
            }
            return sum/array.Length;
        }
        //sum product min max average
    }
}
